// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4859.EncoderTest.subsystems;


import org.usfirst.frc4859.EncoderTest.RobotMap;
import org.usfirst.frc4859.EncoderTest.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;

import java.awt.Robot;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class driveTrain extends Subsystem {
    public static WPI_TalonSRX motorLiftStatge = new WPI_TalonSRX(8) ;
    // \\BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
   
    public void liftToHeight(String position) {
        motorLiftStatge.set(ControlMode.MotionMagic,0);
    }
    public void liftDown(double inputSpeed) {
        if(!RobotMap.isLiftStage1Down) motorLiftStatge.set(-RobotMap.kLiftStage1DownSpeed);
        else motorLiftStatge.set(0);
    }
    
    public void liftUp(double inputSpeed){
        motorLiftStatge.set(inputSpeed);
    }

    public void liftStop() {
        motorLiftStatge.set(0);
    }
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX talonSRX1;
    private Encoder quadratureEncoder1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public driveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        talonSRX1 = new WPI_TalonSRX(8);
        motorConfig();
        
        
        quadratureEncoder1 = new Encoder(0, 1, false, EncodingType.k4X);
        addChild("Quadrature Encoder 1",quadratureEncoder1);
        quadratureEncoder1.setDistancePerPulse(1.0);
        quadratureEncoder1.setPIDSourceType(PIDSourceType.kRate);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    private void motorConfig() {
       
       
        motorLiftStatge.configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative);
        motorLiftStatge.setSensorPhase(true);
        motorLiftStatge.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 5);
        motorLiftStatge.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 5);
        motorLiftStatge.setStatusFramePeriod(StatusFrameEnhanced.Status_9_MotProfBuffer, 5);
        motorLiftStatge.selectProfileSlot( RobotMap.kPIDSlot, 0);
        motorLiftStatge.config_kP(0, RobotMap.kLiftStage1P, RobotMap.kTimeoutMs);
        motorLiftStatge.config_kI(0, RobotMap.kLiftStage1I, RobotMap.kTimeoutMs);
        motorLiftStatge.config_kD(0, RobotMap.kLiftStage1D, RobotMap.kTimeoutMs);
        motorLiftStatge.config_kF(0, RobotMap.kLiftStage1F, RobotMap.kTimeoutMs);
        motorLiftStatge.configAllowableClosedloopError(RobotMap.kPIDSlot, RobotMap.kLiftStage1AllowableError, RobotMap.kTimeoutMs);
        motorLiftStatge.configContinousCurrentLimit(RobotMap.kLiftStage1ContinuousCurrentLimit, RobotMap.kTimeoutMs);
        motorLiftStatge.configPeakCurrentDuration(RobotMap.kLiftStage1CurrentPeakDuration, RobotMap.kTimeoutMs);
        motorLiftStatge.configPeakCurrentLimit(RobotMap.kLiftStage1PeakLimit, RobotMap.kTimeoutMs);
        motorLiftStatge.enableCurrentLimit(true);
        motorLiftStatge.configMotionCruiseVelocity(RobotMap.kLiftStage1CruiseVelocity, RobotMap.kTimeoutMs);
        motorLiftStatge.configMotionAcceleration(RobotMap.kLiftStage1Acceleration, RobotMap.kTimeoutMs);
        motorLiftStatge.setSelectedSensorPosition(0, 0, RobotMap.kTimeoutMs);
        System.out.println("Lifter motor config ran");
        
    } 
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

